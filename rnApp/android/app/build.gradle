apply plugin: "com.android.application"
apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "com.facebook.react"

/**
 * This is the configuration block to customize your React Native Android app.
 * By default you don't need to apply any configuration, just uncomment the lines you need.
 */
react {
    /* Folders */
    //   The root of your project, i.e. where "package.json" lives. Default is '../..'
    // root = file("../../")
    //   The folder where the react-native NPM package is. Default is ../../node_modules/react-native
    // reactNativeDir = file("../../node_modules/react-native")
    //   The folder where the react-native Codegen package is. Default is ../../node_modules/@react-native/codegen
    // codegenDir = file("../../node_modules/@react-native/codegen")
    //   The cli.js file which is the React Native CLI entrypoint. Default is ../../node_modules/react-native/cli.js
    // cliFile = file("../../node_modules/react-native/cli.js")

    /* Variants */
    //   The list of variants to that are debuggable. For those we're going to
    //   skip the bundling of the JS bundle and the assets. By default is just 'debug'.
    //   If you add flavors like lite, prod, etc. you'll have to list your debuggableVariants.
    // debuggableVariants = ["liteDebug", "prodDebug"]

    /* Bundling */
    //   A list containing the node command and its flags. Default is just 'node'.
    // nodeExecutableAndArgs = ["node"]
    //
    //   The command to run when bundling. By default is 'bundle'
    // bundleCommand = "ram-bundle"
    //
    //   The path to the CLI configuration file. Default is empty.
    // bundleConfig = file(../rn-cli.config.js)
    //
    //   The name of the generated asset file containing your JS bundle
    // bundleAssetName = "MyApplication.android.bundle"
    //
    //   The entry file for bundle generation. Default is 'index.android.js' or 'index.js'
    // entryFile = file("../js/MyApplication.android.js")
    //
    //   A list of extra flags to pass to the 'bundle' commands.
    //   See https://github.com/react-native-community/cli/blob/main/docs/commands.md#bundle
    // extraPackagerArgs = []

    /* Hermes Commands */
    //   The hermes compiler command to run. By default it is 'hermesc'
    // hermesCommand = "$rootDir/my-custom-hermesc/bin/hermesc"
    //
    //   The list of flags to pass to the Hermes compiler. By default is "-O", "-output-source-map"
    // hermesFlags = ["-O", "-output-source-map"]

    /* Autolinking */
    autolinkLibrariesWithApp()
}

/**
 * Set this to true to Run Proguard on Release builds to minify the Java bytecode.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore (JSC)
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = io.github.react-native-community:jsc-android-intl:2026004.+`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US. Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'io.github.react-native-community:jsc-android:2026004.+'

import groovy.json.JsonSlurper
import groovy.json.JsonBuilder  

// 解析 version 字段并自增最后一个数字
def getIncrementedVersionName() {
    def packageJson = new File(rootProject.projectDir.parentFile, 'package.json')  // 获取上一级目录的 package.json
    def json = new JsonSlurper().parseText(packageJson.text)

    // 获取 version 字段
    def version = json.version ?: "1.0.0"  // 如果没有 version 字段，使用默认值 "1.0.0"
    
    // 将 version 拆分为 x, y, z
    def versionParts = version.split('\\.')
    def major = versionParts[0]  // 主版本号
    def minor = versionParts[1]  // 次版本号
    def patch = versionParts[2].toInteger()  // 修复版本号

    // 修复版本号自增
    patch += 1
    def newVersion = "$major.$minor.$patch"  // 新的 version

    // 更新 package.json 中的 version 字段
    json.version = newVersion

    // 保存更新后的 package.json
    def jsonWriter = new FileWriter(packageJson)
    jsonWriter.write(new JsonBuilder(json).toPrettyString())  // 使用 JsonBuilder 进行格式化
    jsonWriter.close()

    return newVersion  // 返回自增后的 version
}

// 读取 package.json 文件中的 versionCode 字段，并自增
def getIncrementedVersionCode() {
    def packageJson = new File(rootProject.projectDir.parentFile, 'package.json')  // 获取上一级目录的 package.json
    def json = new JsonSlurper().parseText(packageJson.text)

    def currentVersionCode = json.versionCode ?: 1  // 默认值为 1，如果没有定义 versionCode
    def newVersionCode = currentVersionCode + 1  // 自增 versionCode

    // 更新 package.json 中的 versionCode 字段
    json.versionCode = newVersionCode

    // 保存更新后的 package.json
    def jsonWriter = new FileWriter(packageJson)
    jsonWriter.write(new JsonBuilder(json).toPrettyString())
    jsonWriter.close()

    return newVersionCode
}



android {
    ndkVersion rootProject.ext.ndkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion
    compileSdk rootProject.ext.compileSdkVersion

    namespace "com.rnapp"
    defaultConfig {
        applicationId "club.aiiko.trip"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        // versionCode 1
        // versionName "1.0"
       // 使用 package.json 中的 version 字段作为 versionName
        versionName getIncrementedVersionName()

        // 使用 package.json 中的 versionCode 字段，并递增
        versionCode getIncrementedVersionCode()
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }   
        release {
            storeFile file(MYAPP_RELEASE_STORE_FILE)
            storePassword MYAPP_RELEASE_STORE_PASSWORD
            keyAlias MYAPP_RELEASE_KEY_ALIAS
            keyPassword MYAPP_RELEASE_KEY_PASSWORD
        }
    }
    buildTypes {
        debug {
            manifestPlaceholders = [ appLabel: "@string/app_name_debug" ]
            // resValue "string", "app_name", "Trip Debug"  // Debug 应用名
            applicationIdSuffix ".debug"  // Debug 包名变成 com.your.app.debug
            signingConfig signingConfigs.debug
        }
        release {
            manifestPlaceholders = [ appLabel: "@string/app_name" ]
            // resValue "string", "app_name", "Trip"  // Release 应用名
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.release
            // minifyEnabled enableProguardInReleaseBuilds
            minifyEnabled true  // 开启代码混淆
            shrinkResources true  // 开启资源压缩
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"

        }
    }
}

dependencies {
    implementation "androidx.webkit:webkit:1.9.0" // 使用最新稳定版
    implementation "com.facebook.react:react-native:+"  // 确保已存在

        // implementation(name: 'geckoview-nightly-119.0.20230915220551', ext: 'aar')
    //  implementation(name: 'geckoview-nightly-119.0.20230915220551', ext: 'aar')
    // implementation 'org.mozilla.geckoview:geckoview:124.0.20240429092407'
    // implementation 'org.mozilla.geckoview:geckoview:3d3b577c33'  // 最新版
    // implementation 'org.mozilla.geckoview:geckoview:v119.0.0'  // 最新版
    // implementation 'org.mozilla.geckoview:geckoview:114.0.0' // 使用适当的版本号
    implementation 'com.google.android.gms:play-services-location:21.0.1'
    // implementation project(':react-native-geolocation-service')
    // The version of react-native is set by the React Native Gradle Plugin
    implementation("com.facebook.react:react-android")
    

    if (hermesEnabled.toBoolean()) {
        implementation("com.facebook.react:hermes-android")
    } else {
        implementation jscFlavor
    }
}
